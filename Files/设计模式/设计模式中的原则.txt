    1.单一职责原则
    就一个类而言，应该仅有一个引起它变化的原因。
    如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。
这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。
    软件设计真正要做的许多内容，就是发现职责并把哪些职责相互分离。如果能够想到多于一个的动机去改变一个类，那么这个
类就具有多于一个的职责，就应该考虑类的职责分离。
	
    2.开放-封闭原则
    开放-封闭原则是说软件实体（类、模块、函数等等）应该可以扩展，但是不可以修改。
    无论模块是多么的‘封闭’，都会存在一些无法对之封闭的变化。既然不可能完全封闭，设计人员必须对于他设计的模块应该对
哪种变化封闭做出选择。他必须先猜测出最有可能发生的变化种类，然后构造抽象来隔离哪些变化。
    面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码。
    开放-封闭原则是面向对象设计的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护、可扩展、
可复用、灵活性好。开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进
行抽象同样也不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。

    3.依赖倒转（依赖倒置）原则
    1）高层模块不应该依赖低层模块。两个都应该依赖抽象。
    2）抽象不应该依赖细节。细节应该依赖抽象。
    也就是针对接口编程，不要对实现编程。
	
    4.里氏代换原则
    子类型必须能够替换掉它们的父类型。
    一个软件实体如果使用的是一个父类的话，那么一定使用其子类，而且它察觉不出父类对象和子类对象的区别。也就是说，在
软件里面，把父类都替换成它的子类，程序的行为没有变化。

    5.迪米特法则（最少知识原则）
    如果两个类不必彼此直接通信，那么这两个类就不应当直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，
可以通过第三者转发这个调用。
    强调在类的结构设计上，每一个类都应当尽量降低成员的访问权限。类内需要公开的字段通常就用属性来体现。迪米特法则强
调了类之间的松耦合。
    类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。
	
    6.合成/聚合复用原则
    尽量使用合成/聚合，尽量不要使用类继承。
    is-a的关系考虑继承。
	
